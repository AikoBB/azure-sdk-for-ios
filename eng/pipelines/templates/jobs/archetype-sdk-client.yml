parameters:
  ServiceDirectory: not-specified # Set a default that breaks in obvious ways.

jobs:
  - job: 'Build'

    variables:
      - template: ../variables/globals.yml

    pool:
      vmImage: '$(OSVmImage)'

    steps:
      - script: |
          echo "##vso[build.addbuildtag]Scheduled"
        displayName: 'Tag scheduled builds'
        condition: and(succeeded(), eq(variables['Build.SourceBranchName'],'master'),eq(variables['Build.Reason'],'Schedule'))

      - template: tools/daily-dev-build-variable/daily-dev-build-variable.yml@azure-sdk-tools

      - script: sudo xcode-select --switch /Applications/Xcode_$(XcodeVersion).app
        displayName: 'Use Xcode $(XcodeVersion)'

      - script: pod install
        displayName: 'Install dependencies'

      - script: |
          set -o pipefail
          xcodebuild -workspace AzureSDK.xcworkspace \
                     -scheme ${{parameters.ServiceDirectory}} \
                     -destination "platform=iOS Simulator,OS=$(SimulatorVersion),name=$(SimulatorDevice)" \
                     -configuration Release \
                     -derivedDataPath $(Build.ArtifactStagingDirectory) \
                     build | xcpretty -c
        displayName: 'Build libraries for release'

      - publish: $(Build.ArtifactStagingDirectory)/Build/Products/Release-iphonesimulator
        displayName: 'Publish Release Artifacts [iphonesimulator]'
        artifact: 'bundles-release-iphonesimulator'

  - job: 'Analyze'
    condition: and(succeeded(), ne(variables['Skip.Analyze'], 'true'))

    variables:
      - template: ../variables/globals.yml

    pool:
      vmImage: '$(OSVmImage)'

    steps:
      - task: UsePythonVersion@0
        displayName: 'Use Python 3.6'
        inputs:
          versionSpec: '3.6'

      - script: sudo xcode-select --switch /Applications/Xcode_$(XcodeVersion).app
        displayName: 'Use Xcode $(XcodeVersion)'

      - script: |
          brew install swiftlint
          swiftlint lint --path sdk/${{parameters.ServiceDirectory}} --quiet --reporter emoji
        displayName: 'Lint framework sources'

      - script: |
          pip install setuptools wheel
          pip install doc-warden==$(DocWardenVersion)
          ward scan -d $(Build.SourcesDirectory) -c $(Build.SourcesDirectory)/eng/.docsettings.yml
        displayName: 'Verify Readmes'

      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        # ComponentGovernance is currently unable to run on pull requests of public projects. Running on non-PR
        # builds should be sufficient.
        condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: 'Component Detection'

  - job: 'UnitTest'

    variables:
      - template: ../variables/globals.yml

    pool:
      vmImage: '$(OSVmImage)'

    steps:
      - script: sudo xcode-select --switch /Applications/Xcode_$(XcodeVersion).app
        displayName: 'Use Xcode $(XcodeVersion)'

      - script: gem install trainer
        displayName: 'Install build tools'

      - script: pod install
        displayName: 'Install dependencies'

      - script: |
          set -o pipefail
          xcodebuild -workspace AzureSDK.xcworkspace \
                     -scheme ${{parameters.ServiceDirectory}} \
                     -destination "platform=iOS Simulator,OS=$(SimulatorVersion),name=$(SimulatorDevice)" \
                     -configuration Debug \
                     -derivedDataPath $(Build.ArtifactStagingDirectory) \
                     test | xcpretty -c
        displayName: 'Build and test libraries'

      - script: trainer --path $(Build.ArtifactStagingDirectory) --fail_build false
        displayName: 'Convert unit test results'

      - task: PublishTestResults@2
        inputs:
          searchFolder: '$(Build.ArtifactStagingDirectory)/Logs/Test'
          testResultsFiles: '*.xml'
          testRunTitle: 'Unit Tests - [Xcode $(XcodeVersion), iOS $(SimulatorVersion)]'
        displayName: 'Publish unit test results'
